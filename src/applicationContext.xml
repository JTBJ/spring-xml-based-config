<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- config for spring logging information -->
    <bean id="myLoggerConfig" class="com.spring.xml_based_config.logger.MyLoggerConfig" init-method="initLogger">
        <property name="rootLoggerLevel" value="FINE" />
        <property name="printedLoggerLevel" value="FINE"/>
    </bean>

    <!-- loading property file for property injection (quit search to use yml-complete later maybe) -->
    <context:property-placeholder location="prop-injection.properties" />

    <bean id="fortuneService"
          class="com.spring.xml_based_config.dependencyImpl.HappyFortuneServiceImpl">
    </bean>

    <!-- BEAN SCOPE -->
    <!--
         SINGLETON - creates a single shared instance of the bean. Default scope
         PROTOTYPE - creates a new bean instance for each container request
         REQUEST - scoped to an http web request. Only used for web apps.
         SESSION - scoped to an http web session. Only used for web apps.
         GLOBAL-SESSION - scoped to a glabal http web session. Only used for web apps.
    -->

    <!-- Constructor injection -->
    <bean id="bbCoach" class="com.spring.xml_based_config.coachImpl.BaseballCoach" scope="prototype" init-method="init">
        <constructor-arg ref="fortuneService" />
    </bean>

    <!-- LIFECYCLE METHODS init-method & destroy-method -->
    <bean id="tCoach" class="com.spring.xml_based_config.coachImpl.TrackCoach" init-method="init" destroy-method="destroy">
        <constructor-arg ref="fortuneService" />
    </bean>

    <!-- Setter injection -->
    <bean id="cCoach" class="com.spring.xml_based_config.coachImpl.CricketCoach">
        <property name="fortuneService" ref="fortuneService" />

        <!-- injecting property values from xml-based container -->
        <property name="emailAddress" value="james@benton.com" />

        <!-- injecting property values from property file -->
        <property name="team" value="${coach.cricket.team}" />
    </bean>

    <!-- post processor to call lifecycle call back destroy(); for prototype bean -->
    <bean id="customBeanPostProcessor" class="com.spring.xml_based_config.bean_post_processor.CustomBeanPostProcessor" />
</beans>